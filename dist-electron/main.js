"use strict";const{app:$,BrowserWindow:G,ipcMain:f,dialog:j}=require("electron"),F=require("path"),L=require("openai"),c=require("fs"),V=require("os"),B=require("keytar"),Z=require("electron-store"),{registerAllHandlers:ee}=require("./backend/handlers"),W="Audio Transcription App",z="openai-api-key",J=new Z({defaults:{transcripts:[],chatHistory:{},"summary-templates":[]}});process.on("uncaughtException",e=>{console.error("Uncaught Exception:",e),j.showErrorBox("Application Error",`An error occurred during startup:

${e.message}

Stack: ${e.stack}`)});let A,v,x,R=!1;try{console.log("=== FFmpeg Loading Debug Info ==="),console.log("Platform:",process.platform),console.log("Architecture:",process.arch),console.log("App path:",$.getAppPath()),console.log("Resource path:",process.resourcesPath),A=require("fluent-ffmpeg"),console.log("✓ fluent-ffmpeg loaded");try{if(v=require("@ffmpeg-installer/ffmpeg").path,v.includes("app.asar")&&!v.includes(".asar.unpacked")&&(v=v.replace("app.asar","app.asar.unpacked")),console.log("✓ ffmpeg-installer loaded"),console.log("FFmpeg path:",v),console.log("FFmpeg exists:",c.existsSync(v)),c.existsSync(v)){const t=c.statSync(v);console.log("FFmpeg is file:",t.isFile()),console.log("FFmpeg is directory:",t.isDirectory())}}catch(e){throw console.error("✗ Error loading ffmpeg-installer:",e.message),e}try{if(x=require("@ffprobe-installer/ffprobe").path,x.includes("app.asar")&&!x.includes(".asar.unpacked")&&(x=x.replace("app.asar","app.asar.unpacked")),console.log("✓ ffprobe-installer loaded"),console.log("FFprobe path:",x),console.log("FFprobe exists:",c.existsSync(x)),c.existsSync(x)){const t=c.statSync(x);console.log("FFprobe is file:",t.isFile()),console.log("FFprobe is directory:",t.isDirectory())}}catch(e){throw console.error("✗ Error loading ffprobe-installer:",e.message),e}A.setFfmpegPath(v),A.setFfprobePath(x),R=!0,console.log("✓ FFmpeg fully configured and available"),console.log("=================================")}catch(e){console.error("=== FFmpeg Loading Failed ==="),console.error("Error:",e.message),console.error("Stack:",e.stack),console.error("============================"),process.platform==="win32"&&j.showErrorBox("Large File Support Unavailable",`FFmpeg could not be loaded. Large file support (>25MB) will not work.

Error: ${e.message}

Files under 25MB will still work normally.`)}$.setName("Audio Transcription");let a;function X(e){return new Promise((t,s)=>{A.ffprobe(e,(n,r)=>{n?s(n):t(r.format.duration)})})}async function te(e){return new Promise((t,s)=>{const n=V.tmpdir(),r=F.join(n,`converted-${Date.now()}.mp3`);A(e).output(r).audioCodec("libmp3lame").audioBitrate("192k").audioFrequency(44100).on("end",()=>t(r)).on("error",o=>s(new Error(`Audio conversion failed: ${o.message}`))).run()})}async function se(e,t=20){try{const n=c.statSync(e).size/(1024*1024);if(n<=25)return[e];const r=await X(e),o=V.tmpdir(),u=F.join(o,`chunks-${Date.now()}`);c.mkdirSync(u,{recursive:!0});const i=Math.floor(r*t/n),w=Math.ceil(r/i),p=[];for(let k=0;k<w;k++){const g=k*i,I=F.join(u,`chunk-${k}.mp3`);await new Promise((E,m)=>{A(e).setStartTime(g).setDuration(i).output(I).audioCodec("libmp3lame").audioBitrate("128k").on("end",()=>E()).on("error",h=>m(h)).run()}),p.push(I)}return p}catch(s){throw new Error(`Failed to split audio: ${s.message}`)}}function q(e){const t=e.split(":"),s=parseInt(t[0]),n=parseInt(t[1]),r=t[2].split("."),o=parseInt(r[0]),u=parseInt(r[1]);return s*3600+n*60+o+u/1e3}function M(e){const t=Math.floor(e/3600),s=Math.floor(e%3600/60),n=Math.floor(e%60),r=Math.floor(e%1*1e3);return`${String(t).padStart(2,"0")}:${String(s).padStart(2,"0")}:${String(n).padStart(2,"0")}.${String(r).padStart(3,"0")}`}function re(e,t){let s=`WEBVTT

`,n=1,r=0;for(let o=0;o<e.length;o++){const i=e[o].split(`
`);let w=!0,p=[];for(let k=0;k<i.length;k++){const g=i[k];if(w){if(g.trim()===""||g.startsWith("WEBVTT"))continue;w=!1}if(g.includes("-->")){const[I,E]=g.split("-->").map(b=>b.trim()),m=q(I)+r,h=q(E)+r;p.push(`${n}`),p.push(`${M(m)} --> ${M(h)}`),n++}else g.trim()===""?p.length>0&&(s+=p.join(`
`)+`

`,p=[]):g.match(/^\d+$/)||p.push(g)}p.length>0&&(s+=p.join(`
`)+`

`),o<t.length&&(r+=t[o])}return s}function U(e){try{if(e.length>0){const t=F.dirname(e[0]);e.forEach(s=>{c.existsSync(s)&&c.unlinkSync(s)}),c.existsSync(t)&&c.rmdirSync(t)}}catch(t){console.error("Error cleaning up chunks:",t)}}function Y(){const e=process.platform==="win32";process.platform,a=new G({width:1100,height:750,minWidth:900,minHeight:600,title:"Audio Transcription",webPreferences:{preload:F.join(__dirname,"preload.js"),nodeIntegration:!1,contextIsolation:!0},titleBarStyle:e?"hidden":"hiddenInset",frame:!e,backgroundColor:"#ffffff"}),process.env.VITE_DEV_SERVER_URL?a.loadURL(process.env.VITE_DEV_SERVER_URL):a.loadFile(F.join(__dirname,"dist/index.html")),a.webContents.on("did-finish-load",async()=>{try{await B.getPassword(W,z)?a.webContents.send("api-key-status","valid"):a.webContents.send("api-key-status","missing")}catch(t){console.error("Error checking API key on startup:",t),a.webContents.send("api-key-status","missing")}})}$.whenReady().then(Y);$.on("window-all-closed",()=>{process.platform!=="darwin"&&$.quit()});$.on("activate",()=>{G.getAllWindows().length===0&&Y()});f.handle("validate-api-key",async(e,t)=>{try{return await new L({apiKey:t}).models.list(),{success:!0,message:"API key is valid"}}catch(s){let n="Invalid API key";return s.status===401?n="Invalid API key. Please check your key and try again.":s.status===429?n="Rate limit exceeded. Please try again later.":s.message&&(n=s.message),{success:!1,error:n}}});f.handle("save-api-key",async(e,t)=>(global.apiKey=t,{success:!0}));f.handle("get-api-key",async()=>global.apiKey||null);f.handle("save-api-key-secure",async(e,t)=>{try{return await B.setPassword(W,z,t),console.log("✓ API key saved to secure storage"),{success:!0}}catch(s){return console.error("Failed to save API key:",s),{success:!1,error:s.message}}});f.handle("get-api-key-secure",async()=>{try{return{success:!0,apiKey:await B.getPassword(W,z)}}catch(e){return console.error("Failed to retrieve API key:",e),{success:!1,error:e.message}}});f.handle("delete-api-key-secure",async()=>{try{const e=await B.deletePassword(W,z);return console.log("✓ API key deleted from secure storage"),{success:e}}catch(e){return console.error("Failed to delete API key:",e),{success:!1,error:e.message}}});f.handle("get-templates",async()=>{try{const e=J.get("summary-templates",[]);return console.log("✓ Loaded summary templates from storage"),{success:!0,templates:e}}catch(e){return console.error("Failed to load templates:",e),{success:!1,error:e.message,templates:[]}}});f.handle("save-templates",async(e,t)=>{try{return J.set("summary-templates",t),console.log("✓ Saved summary templates to storage"),{success:!0}}catch(s){return console.error("Failed to save templates:",s),{success:!1,error:s.message}}});f.handle("save-file-to-temp",async(e,t,s)=>{try{const n=V.tmpdir(),r=F.basename(s),o=F.join(n,`upload-${Date.now()}-${r}`);return console.log("Saving file to temp:",o),c.writeFileSync(o,Buffer.from(t)),{success:!0,filePath:o}}catch(n){return console.error("Failed to save file to temp:",n),{success:!1,error:n.message}}});f.on("window-minimize",()=>{a&&a.minimize()});f.on("window-maximize",()=>{a&&(a.isMaximized()?a.unmaximize():a.maximize())});f.on("window-close",()=>{a&&a.close()});f.handle("navigate",async(e,t)=>{a.loadFile(`src/${t}.html`)});f.handle("save-recording",async(e,t)=>{try{const s=V.tmpdir(),n=F.join(s,`recording-${Date.now()}.webm`),r=Buffer.from(t);return c.writeFileSync(n,r),{success:!0,filePath:n}}catch(s){return{success:!1,error:s.message||"Failed to save recording"}}});function N(e){const s=c.readFileSync(e).toString("base64"),n=F.extname(e).toLowerCase();return`data:${{".mp3":"audio/mpeg",".wav":"audio/wav",".m4a":"audio/mp4",".webm":"audio/webm",".mp4":"audio/mp4",".mpeg":"audio/mpeg",".mpga":"audio/mpeg"}[n]||"audio/mpeg"};base64,${s}`}function K(e){return!e||!e.text?`WEBVTT

`+(e?.text||""):`WEBVTT

`+e.text}function H(e){if(!e||!e.segments)return`WEBVTT

`;let t=`WEBVTT

`,s=1;for(const n of e.segments){const r=M(n.start),o=M(n.end),u=n.speaker||"Unknown",i=n.text||"";t+=`${s}
`,t+=`${r} --> ${o}
`,t+=`[${u}] ${i}

`,s++}return t}function O(e){return e?e.split(`
`).filter(t=>{const s=t.trim();return s!==""&&!s.startsWith("WEBVTT")&&!s.includes("-->")&&!/^\d+$/.test(s)}).join(`
`).trim():""}f.handle("transcribe-audio",async(e,t,s,n)=>{let r=[],o=null;const u=typeof n=="string",i=u?"whisper-1":n?.model||"gpt-4o-transcribe",w=u?n:n?.prompt||null,p=u?null:n?.speakers||null;try{const k=new L({apiKey:s});let g=t;if(t.toLowerCase().endsWith(".webm")){if(!R)return{success:!1,error:`WebM recordings require FFmpeg for conversion, which could not be loaded on this system.

Please try uploading an MP3 or WAV file instead, or try re-downloading the application.`};a&&!a.isDestroyed()&&a.webContents.send("transcription-progress",{status:"converting",message:"Converting recording to MP3 format..."}),o=await te(t),g=o}const E=c.statSync(g).size/(1024*1024);if(E>25){if(!R)return o&&c.existsSync(o)&&c.unlinkSync(o),{success:!1,error:`File size is ${E.toFixed(1)}MB, which exceeds the 25MB API limit.

Large file support requires FFmpeg, which could not be loaded on this system.

Please use a file smaller than 25MB, or try re-downloading the application.`};a&&!a.isDestroyed()&&a.webContents.send("transcription-progress",{status:"splitting",message:"Splitting large audio file into chunks..."}),r=await se(g,20);const m=[];for(const l of r){const T=await X(l);m.push(T)}const h=[];for(let l=0;l<r.length;l++){const T=r[l];a&&!a.isDestroyed()&&a.webContents.send("transcription-progress",{status:"transcribing",message:`Transcribing chunk ${l+1} of ${r.length}...`,current:l+1,total:r.length});let y=null;if(l===0&&w)y=w;else if(l>0&&h[l-1]){const D=h[l-1].split(`
`).filter(P=>!P.includes("-->")&&!P.startsWith("WEBVTT")&&P.trim()!==""&&!/^\d+$/.test(P.trim())).join(" ").trim().slice(-200);w?y=`${w}

Previous context: ${D}`:y=D}try{const d={file:c.createReadStream(T),model:i};if(i==="whisper-1")d.response_format="vtt",y&&(d.prompt=y);else if(i==="gpt-4o-transcribe")d.response_format="json",y&&(d.prompt=y);else if(i==="gpt-4o-transcribe-diarize"&&(d.response_format="diarized_json",d.chunking_strategy="auto",p&&p.length>0&&l===0)){const S=[],D=[];for(const P of p){S.push(P.name);const Q=N(P.path);D.push(Q)}d.known_speaker_names=S,d.known_speaker_references=D}const C=await k.audio.transcriptions.create(d);h.push(C)}catch(d){console.error(`Error transcribing chunk ${l+1}:`,d),h.push(i==="whisper-1"?"":{text:""})}}a&&!a.isDestroyed()&&a.webContents.send("transcription-progress",{status:"combining",message:"Combining transcripts..."});let b,_=!1;if(i==="whisper-1")b=re(h,m);else if(i==="gpt-4o-transcribe"){const l=h.map(T=>T.text||"").join(" ");b=K({text:l})}else if(i==="gpt-4o-transcribe-diarize"){let l=[],T=0;for(let y=0;y<h.length;y++){const d=h[y];if(d.segments){const C=d.segments.map(S=>({...S,start:S.start+T,end:S.end+T}));l=l.concat(C)}y<m.length&&(T+=m[y])}b=H({segments:l}),_=!0}return U(r),o&&c.existsSync(o)&&c.unlinkSync(o),{success:!0,text:O(b),transcript:b,chunked:!0,totalChunks:r.length,isDiarized:_}}else{const m={file:c.createReadStream(g),model:i};if(i==="whisper-1")m.response_format="vtt",w&&(m.prompt=w);else if(i==="gpt-4o-transcribe")m.response_format="json",w&&(m.prompt=w);else if(i==="gpt-4o-transcribe-diarize"&&(m.response_format="diarized_json",m.chunking_strategy="auto",p&&p.length>0)){const l=[],T=[];for(const y of p){l.push(y.name);const d=N(y.path);T.push(d)}m.known_speaker_names=l,m.known_speaker_references=T}const h=await k.audio.transcriptions.create(m);let b,_=!1;return i==="whisper-1"?b=h:i==="gpt-4o-transcribe"?b=K(h):i==="gpt-4o-transcribe-diarize"&&(b=H(h),_=!0),o&&c.existsSync(o)&&c.unlinkSync(o),{success:!0,text:O(b),transcript:b,chunked:!1,isDiarized:_}}}catch(k){if(r.length>0&&U(r),o&&c.existsSync(o))try{c.unlinkSync(o)}catch(g){console.error("Error cleaning up converted file:",g)}return{success:!1,error:k.message||"Transcription failed"}}});f.handle("generate-summary",async(e,t,s,n)=>{try{const r=new L({apiKey:n});console.log("Generating summary with OpenAI...");const u=(await r.chat.completions.create({model:"gpt-4o",messages:[{role:"system",content:"You are a helpful assistant that creates summaries of transcriptions based on user instructions."},{role:"user",content:`Here is a transcription:

${t}

${s}`}],temperature:.3})).choices[0]?.message?.content;if(!u)throw new Error("No summary generated");return console.log("✓ Summary generated successfully"),{success:!0,summary:u.trim()}}catch(r){return console.error("Summary generation error:",r),{success:!1,error:r.message||"Summary generation failed"}}});ee();f.handle("save-transcript",async(e,t,s,n)=>{try{const r={txt:{name:"Text File",extensions:["txt"]},vtt:{name:"WebVTT Subtitle",extensions:["vtt"]},md:{name:"Markdown",extensions:["md"]},pdf:{name:"PDF Document",extensions:["pdf"]}},o=r[s]||r.txt,u=await j.showSaveDialog(a,{title:"Save Transcript",defaultPath:F.join($.getPath("documents"),`${n}.${o.extensions[0]}`),filters:[{name:o.name,extensions:o.extensions},{name:"All Files",extensions:["*"]}]});if(u.canceled)return{success:!1,cancelled:!0};if(s==="pdf")throw new Error("PDF export not yet implemented. Please use TXT, VTT, or Markdown format.");let i=t;return s==="md"&&(i=`# Transcript

${t}`),c.writeFileSync(u.filePath,i,"utf8"),console.log(`✓ Transcript saved as ${s.toUpperCase()}: ${u.filePath}`),{success:!0,filePath:u.filePath}}catch(r){return console.error("Save transcript error:",r),{success:!1,error:r.message||"Failed to save file"}}});
